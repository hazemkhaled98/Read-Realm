server:
  port: 9999

spring:
  application:
    name: gateway-service
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: http://localhost:8181/realms/readrealm
            user-name-attribute: preferred_username
        registration:
          keycloak:
            client-id: readrealm
            client-secret: rytEJWsrvgeNcWN9JWai6UuEW075myeE
            redirect-uri: http://localhost:9090/login/oauth2/code/readrealm
            scope:
              - openid
              - profile
              - email
            authorization-grant-type: authorization_code
  cloud:
    gateway:
      routes:
        - id: order-service-create
          uri: http://localhost:8080
          predicates:
            - Path=/api/v1/orders/create
            - Method=POST
          filters:
            - StripPrefix=1
            - TokenRelay=
            - RemoveRequestHeader=Cookie
            - name: CircuitBreaker
              args:
                name: orderCreateCircuitBreaker
                fallbackUri: forward:/fallback/create-order
            - name: Retry
              args:
                name: orderServiceRetry
                fallbackUri: forward:/fallback/create-order

        - id: order-service
          uri: http://localhost:8080
          predicates:
            - Path=/api/v1/orders/**
            - Method=GET,POST
          filters:
            - StripPrefix=1
            - TokenRelay=
            - RemoveRequestHeader=Cookie
            - name: CircuitBreaker
              args:
                name: orderServiceCircuitBreaker
                fallbackUri: forward:/fallback/order-service
            - name: Retry
              args:
                name: orderServiceRetry
                fallbackUri: forward:/fallback/order-service

        - id: order-service-api-docs
          uri: http://localhost:8081
          predicates:
            - Path=/docs/order-service/v1/api-docs
          filters:
            - StripPrefix=2
            - RemoveRequestHeader=Cookie

        - id: catalog-service
          uri: http://localhost:8080
          predicates:
            - Path=/api/v1/books/**, /api/v1/authors/**, /api/v1/categories/**, /api/v1/refresh/**
          filters:
            - StripPrefix=1
            - TokenRelay=
            - RemoveRequestHeader=Cookie
            - name: CircuitBreaker
              args:
                name: catalogServiceCircuitBreaker
                fallbackUri: forward:/fallback/catalog-service
            - name: Retry
              args:
                name: catalogServiceRetry
                fallbackUri: forward:/fallback/catalog-service

        - id: catalog-service-api-docs
          uri: http://localhost:8080
          predicates:
            - Path=/docs/catalog-service/v1/api-docs
          filters:
            - StripPrefix=2
            - RemoveRequestHeader=Cookie


resilience4j:
  circuitbreaker:
    configs:
      default:
              registerHealthIndicator: true
              slidingWindowType: COUNT_BASED
              slidingWindowSize: 10
              failureRateThreshold: 50
              waitDurationInOpenState: 5s
              permittedNumberOfCallsInHalfOpenState: 3
              automaticTransitionFromOpenToHalfOpenEnabled: false
              minimumNumberOfCalls: 5
    instances:
        orderServiceCircuitBreaker:
            baseConfig: default
        catalogServiceCircuitBreaker:
            baseConfig: default
        orderCreateCircuitBreaker:
            baseConfig: default

  retry:
    configs:
      default:
              max-attempts: 3
              wait-duration: 2s
    instances:
        orderServiceRetry:
            baseConfig: default
        catalogServiceRetry:
            baseConfig: default


springdoc:
  swagger-ui:
    path: /swagger-ui.html
    urls:
      - name: Order Service
        url: /docs/order-service/v1/api-docs
      - name: Catalog Service
        url: /docs/catalog-service/v1/api-docs
  api-docs:
    path: /v1/api-docs

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, circuitbreakers, prometheus
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  tracing:
    sampling:
      probability: 1.0
  observations:
    key-values:
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always
    circuitbreakers:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
    defaults:
      enabled: true
