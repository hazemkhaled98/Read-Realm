/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.readrealm.order.event;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -840216614077529250L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderDetails\",\"namespace\":\"com.readrealm.order.event\",\"fields\":[{\"name\":\"isbn\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"unitPrice\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":2}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<OrderDetails> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderDetails> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String isbn;
  private int quantity;
  private java.math.BigDecimal unitPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderDetails() {}

  /**
   * All-args constructor.
   * @param isbn The new value for isbn
   * @param quantity The new value for quantity
   * @param unitPrice The new value for unitPrice
   */
  public OrderDetails(java.lang.String isbn, java.lang.Integer quantity, java.math.BigDecimal unitPrice) {
    this.isbn = isbn;
    this.quantity = quantity;
    this.unitPrice = unitPrice;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return isbn;
    case 1: return quantity;
    case 2: return unitPrice;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: isbn = value$ != null ? value$.toString() : null; break;
    case 1: quantity = (java.lang.Integer)value$; break;
    case 2: unitPrice = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'isbn' field.
   * @return The value of the 'isbn' field.
   */
  public java.lang.String getIsbn() {
    return isbn;
  }


  /**
   * Sets the value of the 'isbn' field.
   * @param value the value to set.
   */
  public void setIsbn(java.lang.String value) {
    this.isbn = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'unitPrice' field.
   * @return The value of the 'unitPrice' field.
   */
  public java.math.BigDecimal getUnitPrice() {
    return unitPrice;
  }


  /**
   * Sets the value of the 'unitPrice' field.
   * @param value the value to set.
   */
  public void setUnitPrice(java.math.BigDecimal value) {
    this.unitPrice = value;
  }

  /**
   * Creates a new OrderDetails RecordBuilder.
   * @return A new OrderDetails RecordBuilder
   */
  public static com.readrealm.order.event.OrderDetails.Builder newBuilder() {
    return new com.readrealm.order.event.OrderDetails.Builder();
  }

  /**
   * Creates a new OrderDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderDetails RecordBuilder
   */
  public static com.readrealm.order.event.OrderDetails.Builder newBuilder(com.readrealm.order.event.OrderDetails.Builder other) {
    if (other == null) {
      return new com.readrealm.order.event.OrderDetails.Builder();
    } else {
      return new com.readrealm.order.event.OrderDetails.Builder(other);
    }
  }

  /**
   * Creates a new OrderDetails RecordBuilder by copying an existing OrderDetails instance.
   * @param other The existing instance to copy.
   * @return A new OrderDetails RecordBuilder
   */
  public static com.readrealm.order.event.OrderDetails.Builder newBuilder(com.readrealm.order.event.OrderDetails other) {
    if (other == null) {
      return new com.readrealm.order.event.OrderDetails.Builder();
    } else {
      return new com.readrealm.order.event.OrderDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderDetails instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderDetails>
    implements org.apache.avro.data.RecordBuilder<OrderDetails> {

    private java.lang.String isbn;
    private int quantity;
    private java.math.BigDecimal unitPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.readrealm.order.event.OrderDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isbn)) {
        this.isbn = data().deepCopy(fields()[0].schema(), other.isbn);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[2].schema(), other.unitPrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.readrealm.order.event.OrderDetails other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.isbn)) {
        this.isbn = data().deepCopy(fields()[0].schema(), other.isbn);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[2].schema(), other.unitPrice);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'isbn' field.
      * @return The value.
      */
    public java.lang.String getIsbn() {
      return isbn;
    }


    /**
      * Sets the value of the 'isbn' field.
      * @param value The value of 'isbn'.
      * @return This builder.
      */
    public com.readrealm.order.event.OrderDetails.Builder setIsbn(java.lang.String value) {
      validate(fields()[0], value);
      this.isbn = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'isbn' field has been set.
      * @return True if the 'isbn' field has been set, false otherwise.
      */
    public boolean hasIsbn() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'isbn' field.
      * @return This builder.
      */
    public com.readrealm.order.event.OrderDetails.Builder clearIsbn() {
      isbn = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.readrealm.order.event.OrderDetails.Builder setQuantity(int value) {
      validate(fields()[1], value);
      this.quantity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.readrealm.order.event.OrderDetails.Builder clearQuantity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitPrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getUnitPrice() {
      return unitPrice;
    }


    /**
      * Sets the value of the 'unitPrice' field.
      * @param value The value of 'unitPrice'.
      * @return This builder.
      */
    public com.readrealm.order.event.OrderDetails.Builder setUnitPrice(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.unitPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unitPrice' field has been set.
      * @return True if the 'unitPrice' field has been set, false otherwise.
      */
    public boolean hasUnitPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unitPrice' field.
      * @return This builder.
      */
    public com.readrealm.order.event.OrderDetails.Builder clearUnitPrice() {
      unitPrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderDetails build() {
      try {
        OrderDetails record = new OrderDetails();
        record.isbn = fieldSetFlags()[0] ? this.isbn : (java.lang.String) defaultValue(fields()[0]);
        record.quantity = fieldSetFlags()[1] ? this.quantity : (java.lang.Integer) defaultValue(fields()[1]);
        record.unitPrice = fieldSetFlags()[2] ? this.unitPrice : (java.math.BigDecimal) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderDetails>
    READER$ = (org.apache.avro.io.DatumReader<OrderDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










