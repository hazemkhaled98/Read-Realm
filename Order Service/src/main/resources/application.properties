spring.application.name=${APP_NAME:order-service}

spring.data.mongodb.host=${SPRING_DATA_MONGODB_HOST:localhost}
spring.data.mongodb.port=${SPRING_DATA_MONGODB_PORT:27017}
spring.data.mongodb.database=${SPRING_DATA_MONGODB_DATABASE:orders}
spring.data.mongodb.username=${SPRING_DATA_MONGODB_USERNAME:root}
spring.data.mongodb.password=${SPRING_DATA_MONGODB_PASSWORD:root}
spring.data.mongodb.authentication-database=${SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE:admin}

spring.threads.virtual.enabled=${VIRTUAL_THREADS_ENABLED:true}

server.port=${SERVER_PORT:8081}


spring.docker.compose.file=Order Service\\docker-compose.yaml


springdoc.swagger-ui.path=${SPRINGDOC_SWAGGER_UI_PATH:/swagger-ui.html}
springdoc.api-docs.path=${SPRINGDOC_API_DOCS_PATH:/v1/api-docs}

docs.title=${DOCS_TITLE:Order Service}
docs.version=${DOCS_VERSION:1.0}


spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.consumer.group-id=${SPRING_KAFKA_CONSUMER_GROUP_ID:order-service}
spring.kafka.producer.key-serializer=${SPRING_KAFKA_PRODUCER_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
spring.kafka.producer.value-serializer=${SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER:io.confluent.kafka.serializers.KafkaAvroSerializer}
spring.kafka.producer.properties.schema.registry.url=${SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL:http://localhost:8085}
spring.kafka.consumer.key-deserializer=${SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
spring.kafka.consumer.value-deserializer=${SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER:org.springframework.kafka.support.serializer.ErrorHandlingDeserializer}
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=${SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_DESERIALIZER_KEY_DELEGATE_CLASS:org.apache.kafka.common.serialization.StringDeserializer}
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=${SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_DESERIALIZER_VALUE_DELEGATE_CLASS:io.confluent.kafka.serializers.KafkaAvroDeserializer}
spring.kafka.consumer.properties.schema.registry.url=http://localhost:8085
spring.kafka.consumer.properties.specific.avro.reader=true

management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=${spring.application.name}
management.tracing.sampling.probability=${MANAGEMENT_TRACING_SAMPLING_PROBABILITY:1.0}
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.metrics.tags.application=${spring.application.name}
