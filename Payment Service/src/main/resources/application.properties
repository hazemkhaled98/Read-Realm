spring.application.name=payment-service

spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=payments
spring.data.mongodb.username=root
spring.data.mongodb.password=root
spring.data.mongodb.authentication-database=admin

server.port=8083

# Stripe Configuration
stripe.api.key=sk_test_51Qy7vnJyYNn6LMIKb79G0yDiQxU59tfRT0EtKGQq1nevtrziuMTR5eqxkc8rHPCDDBan6myEEwtDLBbwqoulIhI200Ivl3zoQ5
stripe.webhook.secret=whsec_313157effe096e34e567eba5f71b0e0ac1a65c5e28da0871d68cf85c14870cdc

spring.docker.compose.file=Payment Service\\docker-compose.yaml


springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v1/api-docs

docs.title=Payment Service
docs.version=1.0


spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.schema.registry.url=http://localhost:8085
spring.kafka.consumer.group-id=payment-Service
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.properties.schema.registry.url=http://localhost:8085
spring.kafka.consumer.properties.specific.avro.reader=true


management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=${spring.application.name}
management.tracing.sampling.probability=1.0